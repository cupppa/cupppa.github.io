<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CUPPPA</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>CUPPPA</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 27 Jul 2020 17:03:38 +0800</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>CUPPPA</title>
      <link>/</link>
    </image>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Fri, 13 Apr 2018 23:52:18 +0800</pubDate>
      <guid>/about/</guid>
      <description>&lt;p&gt;My personal site generated by 
&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt; and 
&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;academic&lt;/a&gt; theme.&lt;/p&gt;
&lt;p&gt;Learn more and contribute on 
&lt;a href=&#34;https://github.com/gohugoio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://keysaim.github.io/post/blog/deploy-hugo-blog-in-github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deploy hugo blog in github.io&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Live Code Reloading for Golang Web Project</title>
      <link>/post/live-code-reloading-for-golang-web-project/</link>
      <pubDate>Mon, 27 Jul 2020 17:03:38 +0800</pubDate>
      <guid>/post/live-code-reloading-for-golang-web-project/</guid>
      <description>&lt;p&gt;refer to: 
&lt;a href=&#34;https://medium.com/@olebedev/live-code-reloading-for-golang-web-projects-in-19-lines-8b2e8777b1ea&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Live code reloading for Golang web projects in 19 lines&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-makefile&#34;&gt;Create a Makefile&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;PID      = /tmp/awesome-golang-project.pid
FILES    = $(wildcard *.go) $(wildcard */*.go) $(wildcard layouts/*/*.html) $(wildcard layouts/*/*/*.html)
GOFILES  = $(wildcard *.go) $(wildcard */*.go)
APP      = ./awesome-golang-project

serve: restart
	@fswatch -e &#39;.*\.sw.$&#39; -e &#39;.*~$&#39; -o . | xargs -n1 -I{} make restart || make kill

kill:
	@test ! -f $(PID) || kill `cat $(PID)` || true
	@test ! -f $(PID) || rm $(PID) || true

before:
	@echo &amp;quot;----------------&amp;quot;
	@date
	@echo &amp;quot;----------------&amp;quot;

$(APP): $(FILES)
	@go build $(GO_FILES) -o $@

restart: before kill $(APP)
	@$(APP) &amp;amp; echo $$! &amp;gt; $(PID)

build:
	@go build .

.PHONY: serve restart kill before # let&#39;s go to reserve rules names
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice: attention restart command line &lt;code&gt;@$(APP) &amp;amp; echo $$! &amp;gt; $(PID)&lt;/code&gt;, do not use &lt;code&gt;@go run .&lt;/code&gt; instead, because golang will build a temporary executable file and execute it, than the &lt;code&gt;$$!&lt;/code&gt; is not the final process id. (here is result with golang version 1.13).&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;brew install fswatch
make serve
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Mac Usage</title>
      <link>/post/mac-usage/</link>
      <pubDate>Tue, 14 Jul 2020 11:32:17 +0800</pubDate>
      <guid>/post/mac-usage/</guid>
      <description>&lt;h2 id=&#34;terminal-colors&#34;&gt;Terminal colors&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt; ~/.bash_profile &amp;lt;&amp;lt;EOF
# enable color in the terminal bash shell
export CLICOLOR=1
# setup the color scheme for list
export LSCOLORS=gxfxcxdxbxegedabagacad
# setup the prompt color
export PS1=&#39;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ &#39;
# enable color for terminal
export TERM=xterm-256color
EOF
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Curl Usage</title>
      <link>/post/curl-usage/</link>
      <pubDate>Tue, 14 Jul 2020 10:57:14 +0800</pubDate>
      <guid>/post/curl-usage/</guid>
      <description>&lt;p&gt;Some examples using curl.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;continue-file-transfer&#34;&gt;Continue file transfer&lt;/h2&gt;
&lt;p&gt;command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; curl -C - -O &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;man&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       -C, --continue-at &amp;lt;offset&amp;gt;
              Continue/Resume  a  previous  file transfer at the given offset. The given
              offset is the exact number of bytes that will be  skipped,  counting  from
              the  beginning of the source file before it is transferred to the destina‚Äê
              tion.  If used with uploads, the FTP server command SIZE will not be  used
              by curl.

              Use  &amp;quot;-C -&amp;quot; to tell curl to automatically find out where/how to resume the
              transfer. It then uses the given output/input files to figure that out.

              If this option is used several times, the last one will be used.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;       -O, --remote-name
              Write output to a local file named like the remote file we get. (Only  the
              file part of the remote file is used, the path is cut off.)

              The  remote  file  name to use for saving is extracted from the given URL,
              nothing else.

              Consequentially, the file will be saved in the current working  directory.
              If  you want the file saved in a different directory, make sure you change
              current working directory before you invoke curl with  the  -O,  --remote-
              name flag!

              You may use this option as many times as the number of URLs you have.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Blog with Hugo and Academic</title>
      <link>/post/blog-with-hugo-and-academic/</link>
      <pubDate>Wed, 01 Jul 2020 23:07:31 +0800</pubDate>
      <guid>/post/blog-with-hugo-and-academic/</guid>
      <description>&lt;h2 id=&#34;install-hugo&#34;&gt;Install Hugo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;scoop install hugo
# or
choco install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Mac&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;snap install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-new-site&#34;&gt;Create New Site&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new site blogs
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-submodule&#34;&gt;Add Submodule&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cd blogs
git submodule add https://github.com/gcushen/hugo-academic.git .\themes\academic
git submodule init
git submodule update
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;config-academic&#34;&gt;Config Academic&lt;/h2&gt;
&lt;h4 id=&#34;config_defaultconfigtoml&#34;&gt;config/_default/config.toml&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cp -p config.toml config.backup.toml
cp /dev/null config.toml
cp -r themes/academic/exampleSite/config ./
sed -i &#39;s/title = &amp;quot;Academic&amp;quot;/title = &amp;quot;CUPPPA&amp;quot;/&#39; config/_default/config.toml
sed -i &#39;s/hasCJKLanguage = false/hasCJKLanguage = true/&#39; config/_default/config.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;config_defaultparamstoml&#34;&gt;config/_default/params.toml&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sed -i &#39;s/theme = &amp;quot;minimal&amp;quot;/theme = &amp;quot;dark&amp;quot;/&#39; config/_default/params.toml
sed -i &#39;s/email = &amp;quot;test@example.org&amp;quot;/email = &amp;quot;cupppa@gmail.com&amp;quot;/&#39; config/_default/params.toml
sed -i &#39;s/^date_format = &amp;quot;Jan 2, 2006&amp;quot;/date_format = &amp;quot;2006-01-02&amp;quot;/&#39; config/_default/params.toml
sed -i &#39;s/^time_format = &amp;quot;3:04 PM&amp;quot;/time_format = &amp;quot;15:04&amp;quot;/&#39; config/_default/params.toml
sed -i &#39;s/sharing = true/sharing = false/&#39; config/_default/params.toml
sed -i &#39;s/netlify_cms = true/netlify_cms = false/&#39; config/_default/params.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change or comment lines start with &lt;code&gt;phone&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;, &lt;code&gt;coordinates&lt;/code&gt;, &lt;code&gt;directions&lt;/code&gt;, &lt;code&gt;office_time&lt;/code&gt;, &lt;code&gt;appointment_url&lt;/code&gt;, &lt;code&gt;contact_links&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;config_defaultmenustoml&#34;&gt;config/_default/menus.toml&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt;config/_default/menus.toml &amp;lt;&amp;lt;EOF
[[main]]
  name = &amp;quot;Posts&amp;quot;
  url = &amp;quot;post&amp;quot;
  weight = 10

[[main]]
  name = &amp;quot;Tags&amp;quot;
  url = &amp;quot;tags&amp;quot;
  weight = 20

[[main]]
  name = &amp;quot;Categories&amp;quot;
  url = &amp;quot;categories&amp;quot;
  weight = 30
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;homepage&#34;&gt;homepage&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;mkdir content/home/
cp themes/academic/exampleSite/content/home/index.md content/home/
cp themes/academic/exampleSite/content/home/posts.md content/home/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now your can view the site with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server --watch --verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;custom-homepage&#34;&gt;Custom Homepage&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p layouts/partials/widgets
cp themes/academic/layouts/partials/widgets/pages.html layouts/partials/widgets/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;refer to &lt;code&gt;theme/academic/layouts/partials/widgets/tag_cloud.html&lt;/code&gt;, replace &amp;ldquo;Recent Post&amp;rdquo; partial (&lt;code&gt;&amp;lt;div class=&amp;quot;col-12 col-lg-4 section-headeing&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt;) with below content and move it from left to right side on homepage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;div class=&amp;quot;col-12 col-lg-4 section-heading&amp;quot;&amp;gt;

    {{ $fontSmall := $st.Params.design.font_size_min | default 0.8 }}
    {{ $fontBig := $st.Params.design.font_size_max | default 2.5 }}
    {{ $fontDelta := sub $fontBig $fontSmall }}

    {{ range $taxonomy, $values := site.Taxonomies }}

      {{ $tags := (index site.Taxonomies $taxonomy).ByCount }}
      {{ $count := len $tags }}

      {{/* Warning: Hugo&#39;s `Reverse` function appears to operate in-place, hence the order of performing $max/$min matters. */}}
      {{ $max := add (len (index $tags 0).Pages) 1 }}
      {{ $min := len (index ($tags).Reverse 0).Pages }}
      {{ $delta := sub $max $min }}

    &amp;lt;div class=&amp;quot;row card-simple&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;col-12 section-heading&amp;quot;&amp;gt;
        &amp;lt;h1&amp;gt;{{ with $taxonomy }}{{ . | markdownify | emojify | title }}{{ end }}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;col-12&amp;quot;&amp;gt;
        {{ if ne $count 0 }}
          &amp;lt;div class=&amp;quot;tag-cloud&amp;quot;&amp;gt;
            {{ range $name, $term := (sort $tags &amp;quot;.Page.Title&amp;quot; &amp;quot;asc&amp;quot;) }}
              {{ $tagCount := len $term.Pages }}
              {{ $weight := div (sub (math.Log $tagCount) (math.Log $min)) (sub (math.Log $max) (math.Log $min)) }}
              {{ $fontSize := add $fontSmall (mul (sub $fontBig $fontSmall) $weight) }}
              &amp;lt;a href=&amp;quot;{{ .Page.RelPermalink }}&amp;quot; style=&amp;quot;font-size:{{ $fontSize }}rem&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;badge badge-light&amp;quot;&amp;gt;{{ $tagCount }}&amp;lt;/span&amp;gt; {{ .Page.Title }}&amp;lt;/a&amp;gt;
            {{ end }}
          &amp;lt;/div&amp;gt;
        {{ end }}
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    {{ end }}

  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;localize-cssjsfont&#34;&gt;Localize css/js/font&lt;/h2&gt;
&lt;p&gt;Edit params.toml to change font to &amp;ldquo;native&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sed -i &#39;s/font = &amp;quot;&amp;quot;/font = &amp;quot;native&amp;quot;/&#39; params.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install 
&lt;a href=&#34;https://github.com/sourcethemes/academic-admin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic Admin&lt;/a&gt; tool and import JS and CSS assets to static/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip3 install academic
academic import --assets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add Font Awesome font assets to static/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://github.com/FortAwesome/Font-Awesome/releases/download/5.12.0/fontawesome-free-5.12.0-web.zip -o ~/Downloads/
unzip ~/Downloads/fontawesome-free-5.12.0-web.zip
rsync -av fontawesome-free-5.12.0-web/webfonts static/css/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;custom-axonomy-term-list-page&#34;&gt;Custom Axonomy term list page&lt;/h2&gt;
&lt;p&gt;Refer to &lt;code&gt;themes/academic/layouts/partials/widgets/{tag_cloud,pages}.html&lt;/code&gt;, add template &lt;code&gt;layouts/_default/terms.html&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt;layouts/_default/terms.html &amp;lt;&amp;lt;EOF&amp;gt;
{{- define &amp;quot;main&amp;quot; -}}

{{ partial &amp;quot;page_header.html&amp;quot; . }}

&amp;lt;div class=&amp;quot;universal-wrapper&amp;quot;&amp;gt;
  {{ with .Content }}
  &amp;lt;div class=&amp;quot;article-style&amp;quot;&amp;gt;{{ . }}&amp;lt;/div&amp;gt;
  {{ end }}

  {{ if eq .Type &amp;quot;tags&amp;quot; }}

    {{ $st := . }}
    {{ $tags := .Data.Pages }}
    {{ $count := len $tags }}

    {{ $fontSmall := $st.Params.design.font_size_min | default 0.8 }}
    {{ $fontBig := $st.Params.design.font_size_max | default 2.5 }}

    &amp;lt;div class=&amp;quot;card-simple&amp;quot;&amp;gt;

      {{ if ne $count 0 }}
    
        {{ $fontDelta := sub $fontBig $fontSmall }}
        {{/* Warning: Hugo&#39;s `Reverse` function appears to operate in-place, hence the order of performing $max/$min matters. */}}
        {{ $max := add (len (index $tags 0).Pages) 1 }}
        {{ $min := len (index ($tags).Reverse 0).Pages }}
        {{ $delta := sub $max $min }}
        {{ $fontStep := div $fontDelta $delta }}
    
        &amp;lt;div class=&amp;quot;tag-cloud&amp;quot;&amp;gt;
          {{ range $name, $term := (sort $tags &amp;quot;.Page.Title&amp;quot; &amp;quot;asc&amp;quot;) }}
            {{ $tagCount := len $term.Pages }}
            {{ $weight := div (sub (math.Log $tagCount) (math.Log $min)) (sub (math.Log $max) (math.Log $min)) }}
            {{ $fontSize := add $fontSmall (mul (sub $fontBig $fontSmall) $weight) }}
            &amp;lt;a href=&amp;quot;{{ .Page.RelPermalink }}&amp;quot; style=&amp;quot;font-size:{{ $fontSize }}rem&amp;quot;&amp;gt;{{ .Page.Title }}&amp;lt;/a&amp;gt;
          {{ end }}
        &amp;lt;/div&amp;gt;
      {{ end }}
    
    &amp;lt;/div&amp;gt;

  {{ else if eq .Type &amp;quot;categories&amp;quot; }}

    {{ $view := .Params.design.view }}

    {{ range .Data.Pages }}
      {{ $link := .RelPermalink }}
      {{ $target := &amp;quot;&amp;quot; }}
      {{ with .Params.external_link }}
        {{ $link = . }}
        {{ $target = &amp;quot;target=\&amp;quot;_blank\&amp;quot; rel=\&amp;quot;noopener\&amp;quot;&amp;quot; }}
      {{ end }}

      {{ $st := . }}
      {{ $count := len $st.Pages }}

      {{ $view = $st.Params.design.view | default $view }}

      {{ $items_count := $st.Params.content.count }}
      {{ if eq $items_count 0 }}
        {{ $items_count = 65535 }}
      {{ else }}
        {{ $items_count = $items_count | default 5 }}
      {{ end }}

      &amp;lt;div class=&amp;quot;card-simple&amp;quot;&amp;gt;

        &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;col-12 col-lg-4&amp;quot;&amp;gt;
            &amp;lt;h2&amp;gt;
              &amp;lt;a href=&amp;quot;{{$link}}&amp;quot; {{ $target | safeHTMLAttr }}&amp;gt;
                &amp;lt;i class=&amp;quot;fas fa-folder mr-1&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
                {{ .Title }}
                [&amp;lt;span class=&amp;quot;&amp;quot;&amp;gt;{{ if ge $count $items_count }}{{ $items_count }}/{{ end }}{{ $count }}&amp;lt;/span&amp;gt;]&amp;lt;/a&amp;gt;
            &amp;lt;/h2&amp;gt;
            {{ with $st.Content }}{{ . }}{{ end }}
          &amp;lt;/div&amp;gt;
          &amp;lt;div class=&amp;quot;col-12 col-lg-8&amp;quot;&amp;gt;

            {{ range first $items_count .Pages }}
              {{ if eq $view 1 }}
                {{ partial &amp;quot;li_list&amp;quot; . }}
              {{ else if eq $view 3 }}
                {{ partial &amp;quot;li_card&amp;quot; . }}
              {{ else }}
                {{ partial &amp;quot;li_compact&amp;quot; . }}
              {{ end }}
            {{end}}

          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

      &amp;lt;/div&amp;gt;
      
    {{ end }}

  {{ end }}

&amp;lt;/div&amp;gt;

{{- end -}}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add &lt;code&gt;content/{tags,categories}/_index.md&lt;/code&gt; to appoint list style to &lt;code&gt;card&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt;content/categories/_index.md &amp;lt;&amp;lt;EOF
+++
title = &amp;quot;Categories&amp;quot;

[design]
  # 1: list
  # 2: compact
  # 3: card
  view = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;custom-axonomy-term-page&#34;&gt;Custom axonomy term page&lt;/h2&gt;
&lt;p&gt;Refer to &lt;code&gt;themes/academic/_default/list.html&lt;/code&gt; and &lt;code&gt;themes/academic/_default/partials/widgets/pages.html&lt;/code&gt;, add template &lt;code&gt;layouts/_default/term.html&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt;layouts/_default/term.html &amp;lt;&amp;lt;EOF
{{- define &amp;quot;main&amp;quot; -}}

{{ partial &amp;quot;page_header.html&amp;quot; . }}

&amp;lt;div class=&amp;quot;universal-wrapper&amp;quot;&amp;gt;

  {{ with .Content }}
  &amp;lt;div class=&amp;quot;article-style&amp;quot;&amp;gt;{{ . }}&amp;lt;/div&amp;gt;
  {{ end }}

  {{ $view := .Parent.Params.design.view }}

  {{ $paginator := .Paginate .Data.Pages }}
  {{ range $paginator.Pages }}
    {{ if eq $view 1 }}
      {{ partial &amp;quot;li_list&amp;quot; . }}
    {{ else if eq $view 3 }}
      {{ partial &amp;quot;li_card&amp;quot; . }}
    {{ else }}
      {{ partial &amp;quot;li_compact&amp;quot; . }}
    {{ end }}
  {{ end }}

  {{ partial &amp;quot;pagination&amp;quot; . }}

&amp;lt;/div&amp;gt;

{{- end -}}
EOF
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tcpdump Usage</title>
      <link>/post/tcpdump-usage/</link>
      <pubDate>Wed, 01 Jul 2020 11:52:38 +0800</pubDate>
      <guid>/post/tcpdump-usage/</guid>
      <description>&lt;h2 id=&#34;tcpdump-usage&#34;&gt;Tcpdump Usage&lt;/h2&gt;
&lt;h4 id=&#34;Êü•ÊâæresetÂåÖ&#34;&gt;Êü•ÊâæresetÂåÖ&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;tcpdump -r xxxx.pcap &#39;tcp[tcpflags] &amp;amp; tcp-rst != 0&#39;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Make Qrcode of Home Wifi</title>
      <link>/post/make-wifi-qrcode/</link>
      <pubDate>Mon, 29 Jun 2020 15:55:22 +0800</pubDate>
      <guid>/post/make-wifi-qrcode/</guid>
      <description>&lt;h3 id=&#34;‰ΩøÁî®python‰ª£Á†ÅÂà∂‰Ωúwifi‰∫åÁª¥Á†Å&#34;&gt;‰ΩøÁî®python‰ª£Á†ÅÂà∂‰Ωúwifi‰∫åÁª¥Á†Å&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ pip install wifi-qrcode-generator
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ wifi-qrcode-generator
SSID: SOMESSID
Is the network hidden (default is false): y
Authentication types: WPA/WPA2, WEP, nopass
Authentication type (default is WPA/WPA2):
Password: 
The qr code has been stored in the current directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ ls -l SOMESSID.png
-rw-r--r--  1 cupppa  staff  837  6 29 16:11 SOMESSID.png
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Running GUI&#39;s with Docker on Mac OS X</title>
      <link>/post/running-guis-with-docker-on-mac-os-x/</link>
      <pubDate>Wed, 24 Jul 2019 11:45:30 +0800</pubDate>
      <guid>/post/running-guis-with-docker-on-mac-os-x/</guid>
      <description>&lt;p&gt;[from] &lt;a href=&#34;https://cntnr.io/running-guis-with-docker-on-mac-os-x-a14df6a76efc&#34;&gt;Running GUI&#39;s with Docker on Mac OS X&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
We are very familiar with running CLI processes in Docker containers with no Graphical UI at all. But did you know that you can just as well run applications with a graphical user interfaces, like Chrome, Firefox, Tor Browser, Gimp, etc... with Docker... on OS X!
&lt;/p&gt;
&lt;p&gt;
Âú®DockerÂÆπÂô®‰∏≠ËøêË°åÊó†ÂõæÂΩ¢Áî®Êà∑ÁïåÈù¢ÁöÑÂëΩ‰ª§Ë°åËøõÁ®ãÊàë‰ª¨Â∑≤ÂæàÁÜüÁªÉ„ÄÇ‰ΩÜ‰Ω†ÊòØÂê¶Áü•ÈÅì‰πüÂèØ‰ª•Âú®OSXÁ≥ªÁªü‰∏≠‰ΩøÁî®DockerËøêË°åÊúâÂõæÂΩ¢Áî®Êà∑ÁïåÈù¢ÁöÑÂ∫îÁî®Á®ãÂ∫èÔºåÂ¶ÇChrome, Firefox, Tor Browser, GimpÁ≠âÁ≠â„ÄÇ
&lt;/p&gt;
&lt;p&gt;
This article serves as transcript to &lt;a href=&#34;https://www.youtube.com/watch?v=PKyj8sbZNYw&amp;source=post_page&#34;&gt;our hands-on demo&lt;/a&gt; and as a quick refresher on how to run these kind of applications on a Mac in 5 minutes or less. For a more in depth look on how to build and run Linux GUI apps on Mac I highly recommend &lt;a href=&#34;http://blog.alexellis.io/linux-deskto    p-on-mac/?source=post_page&#34;&gt;the full from scratch rundown&lt;/a&gt;, by fellow Docker Captain Alex Ellis.
&lt;/p&gt;
&lt;p&gt;
Êú¨ÊñáÊòØ&lt;a href=&#34;https://www.youtube.com/watch?v=PKyj8sbZNYw&amp;source=post_page&#34;&gt;Âä®ÊâãÂÆûË∑µÊºîÁ§∫&lt;/a&gt;ÁöÑÊñáÂ≠óËÆ∞ÂΩïÔºåÂø´ÈÄüÂ§ç‰π†‰∫ÜÂ¶Ç‰ΩïÂú®5ÂàÜÈíüÊàñÊõ¥Áü≠Êó∂Èó¥ÂÜÖÂú®Mac‰∏äËøêË°åËøôÁ±ªÂ∫îÁî®Á®ãÂ∫è„ÄÇË¶ÅÊÉ≥Êõ¥Ê∑±ÂÖ•‰∫ÜËß£Â¶Ç‰ΩïÂú®Mac‰∏äÊûÑÂª∫ÂíåËøêË°åLinux GUIÂ∫îÁî®Á®ãÂ∫èÔºåÊàëÂº∫ÂàóÊé®ËçêDockerÈ¢ÜÈòüAlex EllisÁöÑ&lt;a href=&#34;http://blog.alexellis.io/linux-desktop-on-mac/?source=post_page&#34;&gt;‰ªéÈõ∂ÂºÄÂßãÁöÑË¶ÅÁÇπ&lt;/a&gt;„ÄÇ
&lt;/p&gt;
&lt;p&gt;
The first thing we need is socat, a unix tool that creates two bidirectional streams between two endpoints. Our end goal is to create a connection between the docker container that runs a graphical application and the X window system on our OS X host operating system. So lets begin by creating a bridge between a network socket with a TCP listener on port 6000 (the default port of the X window system) and the X window server on my OS X host, that we‚Äôll install and run in the next step on a unix socket.
&lt;/p&gt;
&lt;p&gt;
È¶ñÂÖàÊàë‰ª¨ÈúÄË¶ÅÁöÑÊòØsocatÔºåËøôÊòØ‰∏Ä‰∏™unixÂ∑•ÂÖ∑ÔºåËÉΩÂú®‰∏§‰∏™Á´ØÁÇπ‰πãÈó¥ÂàõÂª∫‰∏§‰∏™ÂèåÂêëÊµÅ„ÄÇÊàë‰ª¨ÁöÑÊúÄÁªàÁõÆÊ†áÊòØÂú®ËøêË°åÂõæÂΩ¢Â∫îÁî®Á®ãÂ∫èÁöÑDockerÂÆπÂô®ÂíåOS X‰∏ªÊú∫Êìç‰ΩúÁ≥ªÁªü‰∏äÁöÑXÁ™óÂè£Á≥ªÁªü‰πãÈó¥Âª∫Á´ãËøûÊé•„ÄÇÈ¶ñÂÖàËÆ©Êàë‰ª¨Âú®‰æ¶Âê¨TCPÁ´ØÂè£6000ÔºàXÁ™óÂè£Á≥ªÁªüÁöÑÈªòËÆ§Á´ØÂè£ÔºâÁöÑÁΩëÁªúÂ•óÊé•Â≠óÂíåOS X‰∏ªÊú∫‰∏äÁöÑXÁ™óÂè£ÊúçÂä°‰πãÈó¥ÂàõÂª∫‰∏Ä‰∏™ÁΩëÊ°•Ôºå‰∏ã‰∏ÄÊ≠•Êàë‰ª¨Â∞ÜÂú®‰∏Ä‰∏™UNIXÂ•óÊé•Â≠ó‰∏äÂÆâË£ÖÂπ∂ËøêË°åXÁ™óÂè£ÊúçÂä°„ÄÇ
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*5-82LVnDtodIHAScrre6nQ.png&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; brew install socat
&amp;gt; socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\&amp;quot;$DISPLAY\&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now we‚Äôll tackle the X window system. To run this on Mac OS X we will need Xquartz which, according to the website, is a project that offers the &lt;a href=&#34;https://www.xquartz.org/?source=post_page&#34;&gt;X Window System on the OS X operating system&lt;/a&gt;. We can either install by downloading a dmg from the website. But since we are good developers we‚Äôll do it from the command line through homebrew. (and yes, I do see the irony in saying that when advertising this post as being all about GUI‚Äôs‚Ä¶)
&lt;/p&gt;
&lt;p&gt;
Áé∞Âú®Êàë‰ª¨ÁùÄÊâãXÁ™óÂè£Á≥ªÁªü„ÄÇË¶ÅÂú®Mac OS X‰∏äËøêË°åËøô‰∏™Á®ãÂ∫èÔºåÊàë‰ª¨ÈúÄË¶ÅXquartzÔºåËØ•ÁΩëÁ´ô‰∏ä‰ªãÁªçÔºåËøô‰∏™È°πÁõÆÊèê‰æõ‰∫Ü&lt;a href=&#34;https://www.xquartz.org/?source=post_page&#34;&gt;OS XÊìç‰ΩúÁ≥ªÁªüÁöÑXÁ™óÂè£Á≥ªÁªü&lt;/a&gt;„ÄÇÊàë‰ª¨ÂèØ‰ª•ÈÄöËøá‰ªéÁΩëÁ´ô‰∏ãËΩΩDMGÊù•ÂÆâË£Ö„ÄÇ‰ΩÜÁî±‰∫éÊàë‰ª¨ÊòØ‰ºòÁßÄÁöÑÂºÄÂèëËÄÖÔºåÊàë‰ª¨Â∞ÜÁî®ÂëΩ‰ª§Ë°åÈÄöËøáhomebrewÊù•ÂÆåÊàêËøôÈ°πÂ∑•‰Ωú„ÄÇÔºàÊòØÁöÑÔºåÁ°ÆÂÆûËÆΩÂâåÁöÑÊòØÔºåÊàëËøôÁØáÊñáÁ´†ÂÆ£‰º†ÁöÑÊòØÂÖ≥‰∫éÂõæÂΩ¢Áî®Êà∑ÁïåÈù¢ÁöÑ...Ôºâ
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; brew install xquartz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
One important thing to note is that after you have installed this is to log out and log back into OS X to get everything to work properly. Once that is done we can start Xquartz.
&lt;/p&gt;
&lt;p&gt;
ÈúÄË¶ÅÊ≥®ÊÑèÁöÑ‰∏Ä‰ª∂ÈáçË¶ÅÁöÑ‰∫ãÊÉÖÊòØÔºåÂú®ÂÆâË£ÖÂÆåÊàê‰πãÂêéÔºåÊÇ®ÈúÄË¶ÅÊ≥®ÈîÄÂπ∂ÈáçÊñ∞ÁôªÂΩïÂà∞OS XÔºå‰ª•‰Ωø‰∏ÄÂàáÊ≠£Â∏∏Â∑•‰Ωú„ÄÇÂÆåÊàêÂêéÔºåÊàë‰ª¨ÂèØ‰ª•ÂêØÂä®Xquartz„ÄÇ
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; open -a Xquartz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
A white terminal window will pop up. Now open up the preferences from the top menu and go to the last tab ‚Äòsecurity‚Äô. There we need to make sure the ‚Äúallow connections from network clients‚Äù is checked ‚Äúon‚Äù.
&lt;/p&gt;
&lt;p&gt;
‰ºöÂºπÂá∫‰∏Ä‰∏™ÁôΩËâ≤ÁªàÁ´ØÁ™óÂè£„ÄÇÁé∞Âú®ÊâæÂºÄÈ°∂ÈÉ®ËèúÂçï‰∏≠ÁöÑÈ¶ñÈÄâÈ°πÂπ∂ËΩ¨Âà∞ÊúÄÂêé‰∏Ä‰∏™ÈÄâÈ°πÂç°‚ÄúÂÆâÂÖ®ÊÄß‚Äù„ÄÇÈúÄË¶ÅÁ°Æ‰øù‚ÄúÂÖÅËÆ∏Êù•Ëá™ÁΩëÁªúÂÆ¢Êà∑Á´ØÁöÑËøûÊé•‚ÄùÈÄâÈ°π‰∏∫‚ÄúÂºÄÂêØ‚ÄùÁä∂ÊÄÅ„ÄÇ
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*zMO-bPar1Z1AUUH-O2WBfw.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
And now we get down to business‚Ä¶ running the actual graphical application within a Docker container!
&lt;/p&gt;
&lt;p&gt;
Áé∞Âú®Êàë‰ª¨Ë∞àÊ≠£‰∫ã......Âú®DockerÂÆπÂô®‰∏≠ËøêË°åÂÆûÈôÖÁöÑÂõæÂΩ¢Â∫îÁî®Á®ãÂ∫èÔºÅ
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*t9RTn9w0PwQAMtK1yrq1GQ.png&#34; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;p style=&#34;color:#888;font-size:12px;&#34;&gt;docker container connecting to the X window system on the host OS X through socat&lt;/p&gt;&lt;/center&gt;
&lt;p&gt;
First we need the ip of the network interface of our host OS. Then we pass that on as the `DISPLAY` environment variable in the Docker container that runs the graphical interface.
&lt;/p&gt;
&lt;p&gt;
È¶ñÂÖàÔºåÊàë‰ª¨ÈúÄË¶Å‰∏ªÊú∫Êìç‰ΩúÁ≥ªÁªüÁöÑÁΩëÁªúÊé•Âè£ÁöÑIP„ÄÇÁÑ∂ÂêéÔºåÊàë‰ª¨Â∞ÜÂÖ∂ÂÅö‰∏∫&#34;DISPLAY&#34;ÁéØÂ¢ÉÂèòÈáèÁöÑÂÄº‰º†ÈÄíÁªôËøêË°åÂõæÂΩ¢ÁïåÈù¢ÁöÑDockerÂÆπÂô®„ÄÇ
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; ifconfig en0
en0:
...
inet 192.168.0.235 netmask 0xffffff00 broadcast 192.168.199.255
...

&amp;gt; docker run -e DISPLAY=192.168.0.235:0 gns3/xeyes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*fBaWucXOW_r9h2sZlfJPNQ.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
All that trouble just to have 2 rolling eyes on your screen? Of course there is way more to explore. What about running &lt;a href=&#34;https://hub.docker.com/r/jess/chrome/?source=post_page&#34;&gt;chrome in a container&lt;/a&gt;? Apart from some extra permissions and a couple of warnings‚Ä¶ easy as pie!
&lt;/p&gt;
&lt;p&gt;
Ëøô‰πàÈ∫ªÁÉ¶Âè™ÊòØÂú®ÊÇ®ÁöÑÂ±èÂπï‰∏äÊúâ‰∫Ü‰∏§Âè™ÊªöÂä®ÁöÑÁúºÁùõÔºüÂΩìÁÑ∂ËøòÊúâÊõ¥Â§öÁöÑÊñπÊ°àÂèØ‰ª•Êé¢Á¥¢„ÄÇÂú®&lt;a href=&#34;https://hub.docker.com/r/jess/chrome/?source=post_page&#34;&gt;ÂÆπÂô®‰∏≠ËøêË°åChrome&lt;/a&gt;ÊÄé‰πàÊ†∑ÔºüÈô§‰∫Ü‰∏Ä‰∫õÈ¢ùÂ§ñÁöÑÊùÉÈôêÂíå‰∏Ä‰∫õË≠¶Âëä‰πãÂ§ñ......ÂæàÁÆÄÂçïÔºÅ
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; docker run -e DISPLAY=192.168.0.235:0 --privileged jess/chrome
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*R4PKVQZfCcLoGkWXJrVoRA.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
The possibilities are endless! So in just a couple of commands we‚Äôve shown that docker shouldn‚Äôt be just used for the typical non-graphical applications. It can just be used as well for &lt;a href=&#34;https://hub.docker.com/u/jess/?source=post_page&#34;&gt;graphical apps&lt;/a&gt;. What use cases do you see valuable with this setup?
&lt;/p&gt;
&lt;p&gt;
ÂèØËÉΩÊÄßÊòØÊó†ÈôêÁöÑÔºÅÂõ†Ê≠§ÔºåÈÄöËøáÂá†‰∏™ÂëΩ‰ª§Êàë‰ª¨Â∑≤ÁªèÂ±ïÁ§∫‰∫ÜDocker‰∏çÂ∫îËØ•‰ªÖ‰ªÖÁî®‰∫éÂÖ∏ÂûãÁöÑÈùûÂõæÂΩ¢Â∫îÁî®Á®ãÂ∫è„ÄÇÂÆÉ‰πüÂèØ‰ª•Áî®‰∫é&lt;a href=&#34;https://hub.docker.com/u/jess/?source=post_page&#34;&gt;ÂõæÂΩ¢Â∫îÁî®Á®ãÂ∫è&lt;/a&gt;„ÄÇÂØπ‰∫éËøôÁßçÊú∫Âà∂ÊÇ®ËøòËÉΩËÆæÊÉ≥Âà∞‰ªÄ‰πàÊúâ‰ª∑ÂÄºÁöÑÁî®‰æãÔºü
&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Check out our hands-on demo in the video below!&lt;/i&gt;&lt;/p&gt;
&lt;iframe src=&#34;https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FPKyj8sbZNYw%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DPKyj8sbZNYw&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FPKyj8sbZNYw%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube&#34; frameborder=&#34;0&#34; height=&#34;440&#34; width=&#34;720&#34; title=&#34;Running GUI&#39;s with Docker on OS X&#34; class=&#34;fz p q fy ac&#34;&gt;&lt;/iframe&gt;
&lt;center&gt;&lt;p style=&#34;color:#888;font-size:12px;&#34;&gt;Running graphical applications on mac OS X live demo&lt;/p&gt;&lt;/center&gt;</description>
    </item>
    
  </channel>
</rss>
